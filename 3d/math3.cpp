#include "ideastypes.h"
#include "math3.h"

//---------------------------------------------------------------------------
void vet3_norm(float *v)
{
   float f;

   f = sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]);
   if(*((int *)&f) != 0){
       f = 1.0f / f;
       v[0] *= f;
       v[1] *= f;
       v[2] *= f;
   }
}
//---------------------------------------------------------------------------
void vet3_sub(float *v,float *v1)
{
	v[0] -= v1[0];v[1] -= v1[1];v[2] -= v1[2];
}
//---------------------------------------------------------------------------
void vet3_cross(float *v,float *v1)
{
   float t[3];

   t[0] = v[0];t[1] = v[1];t[2] = v[2];
   v[0] = t[1] * v1[2] - t[2]*v1[1];
   v[1] = t[2] * v1[0] - t[0]*v1[2];
   v[2] = t[0] * v1[1] - t[1]*v1[0];
}
//---------------------------------------------------------------------------
float vet3_dot(float *v,float *v1)
{
   return v[0] * v1[0] + v[1] * v1[1] + v[2] * v1[2];
}
//---------------------------------------------------------------------------
void vet4_norm(float *v)
{
   float f;

   f = sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]+v[3]*v[3]);
   if(*((int *)&f) == 0)
   	return;
   v[0] /= f;
   v[1] /= f;
   v[2] /= f;
   v[3] /= f;
}
//---------------------------------------------------------------------------
float mtx2x2_det(float a1,float a2,float a3,float a4)
{
   return (a1*a4 - a2*a3);
}
//---------------------------------------------------------------------------
float mtx3x3_det(float a1, float a2, float a3, float b1, float b2, float b3, float c1, float c2, float c3)
{
    return	a1 * (b2*c3 - b3*c2) - b1 * (a2*c3-a3*c2) + c1 * (a2*b3-a3*b2);
}
//---------------------------------------------------------------------------
float mtx4x4_det(float *m)
{
	float a2, a3, a4, b2, b3, b4, c2, c3, c4, d2, d3, d4;

   a2 = m[4];b2 = m[5];c2 = m[6];d2 = m[7];a3 = m[8];
   b3 = m[9];c3 = m[10];d3 = m[11];a4 = m[12];b4 = m[13];
   c4 = m[14];d4 = m[15];
	return	m[0] * mtx3x3_det(b2, b3, b4, c2, c3, c4, d2, d3, d4) -
			m[1] * mtx3x3_det(a2, a3, a4, c2, c3, c4, d2, d3, d4) +
			m[2] * mtx3x3_det(a2, a3, a4, b2, b3, b4, d2, d3, d4) -
			m[3] * mtx3x3_det(a2, a3, a4, b2, b3, b4, c2, c3, c4);
}
//---------------------------------------------------------------------------
void mtx4x4_inverse(float *m,float *m1)
{
   float d;
   int x;

   d = mtx4x4_det(m);
   if(d == 0){
       mtx4x4_transpose(m,m1);
   	return;
   }
   d = 1.0f / d;
   m1[0]  =  mtx3x3_det(m[5], m[6], m[7], m[9], m[10], m[11], m[13], m[14], m[15]);
   m1[4]  = -mtx3x3_det(m[4], m[6], m[7], m[8], m[10], m[11], m[12], m[14], m[15]);
   m1[8]  =  mtx3x3_det(m[4], m[5], m[7], m[8], m[9], m[11], m[12], m[13], m[15]);
   m1[12] = -mtx3x3_det(m[4], m[5], m[6], m[8], m[9], m[10], m[12], m[13], m[14]);

   m1[1]  = -mtx3x3_det(m[1], m[2], m[3], m[9], m[10], m[11], m[13], m[14], m[15]);
   m1[5]  =  mtx3x3_det(m[0], m[2], m[3], m[8], m[10], m[11], m[12], m[14], m[15]);
	m1[9]  = -mtx3x3_det(m[0], m[1], m[3], m[8], m[9], m[11], m[12], m[13], m[15]);
   m1[13] =  mtx3x3_det(m[0], m[1], m[2], m[8], m[9], m[10], m[12], m[13], m[14]);

   m1[2]  =  mtx3x3_det(m[1], m[2], m[3], m[5], m[6], m[7], m[13], m[14], m[15]);
   m1[6]  = -mtx3x3_det(m[0], m[2], m[3], m[4], m[6], m[7], m[12], m[14], m[15]);
   m1[10] =  mtx3x3_det(m[0], m[1], m[3], m[4], m[5], m[7], m[12], m[13], m[15]);
   m1[14] = -mtx3x3_det(m[0], m[1], m[2], m[4], m[5], m[6], m[12], m[13], m[14]);

   m1[3]  = -mtx3x3_det(m[1], m[2], m[3], m[5], m[6], m[7], m[9], m[10], m[11]);
   m1[7]  =  mtx3x3_det(m[0], m[2], m[3], m[4], m[6], m[7], m[8], m[10], m[11]);
   m1[11] = -mtx3x3_det(m[0], m[1], m[3], m[4], m[5], m[7], m[8], m[9], m[11]);
   m1[15] =  mtx3x3_det(m[0], m[1], m[2], m[4], m[5], m[6], m[8], m[9], m[10]);
   for(x=0;x<16;x++)
       m1[x] *= d;
}
//---------------------------------------------------------------------------
void mtx3x3_mtx4x4(float *m4,float *m3)
{
   int x,y;

   for(y=0;y<3;y++){
       for(x=0;x<3;x++)
           m3[y*3+x] = m4[y*4+x];
   }
}
//---------------------------------------------------------------------------
/*BOOL check_ndsoverflow(int *v,int *m,int *ret)
{
	BOOL res;
   int i,a;

	res = FALSE;
	i = 0;
   for(a=0;a<4;a++)
   	i += v[a] * m[a*4];
	*ret = i;
   return res;
}*/
//---------------------------------------------------------------------------
void vet4_mtx4x4(float *v,float *m)
{
   float f[4];

   f[0] = v[0];f[1] = v[1];f[2] = v[2];f[3] = v[3];
   v[0] = f[0] * m[0] + f[1] * m[4] + f[2] * m[8] + f[3] * m[12];
   v[1] = f[0] * m[1] + f[1] * m[5] + f[2] * m[9] + f[3] * m[13];
   v[2] = f[0] * m[2] + f[1] * m[6] + f[2] * m[10] + f[3] * m[14];
   v[3] = f[0] * m[3] + f[1] * m[7] + f[2] * m[11] + f[3] * m[15];
}
//---------------------------------------------------------------------------
void scale_mtx4x4(float *m,float *m1,float v)
{
   for(int i=0;i<16;i++)
       m[i] = m1[i] * v;
}
//---------------------------------------------------------------------------
void vet3_mtx4x4(float *v,float *m)
{
   float f[3];

   f[0]=v[0];f[1]=v[1];f[2]=v[2];
   v[0] = f[0] * m[0] + f[1] * m[4] + f[2] * m[8];
   v[1] = f[0] * m[1] + f[1] * m[5] + f[2] * m[9];
   v[2] = f[0] * m[2] + f[1] * m[6] + f[2] * m[10];
}
//---------------------------------------------------------------------------
void vet2_mtx4x4(float *v,float *m)
{
   float f[2];

   f[0] = v[0];f[1] = v[1];
   v[0] = f[0] * m[0] + f[1] * m[4];
   v[1] = f[0] * m[1] + f[1] * m[5];
}
//---------------------------------------------------------------------------
void mtx4x4_transpose(float *m,float *m1)
{
   float m2[16];

   for(int i = 0;i<16;i++) m2[i] = m[i];
   m1[0] = m2[0];m1[1] = m2[4];m1[2] = m2[8];m1[3] = m2[12];
   m1[4] = m2[1];m1[5] = m2[5];m1[6] = m2[9];m1[7] = m2[13];
   m1[8] = m2[2];m1[9] = m2[6];m1[10] = m2[10];m1[11] = m2[14];
   m1[12] = m2[3];m1[13] = m2[7];m1[14] = m2[11];m1[15] = m2[15];
}
//---------------------------------------------------------------------------
void mtx3x3_inverse(float *m2,float *m1)
{
   float d,m[9];
   int x,y;

   for(y=0;y<3;y++){
       for(x=0;x<3;x++)
           m[y*3+x] = m2[y*4+x];
   }
   d = mtx3x3_det(m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],m[8]);
   if(d == 0)
       return;
   d = 1.0f / d;
   m1[0] = mtx2x2_det(m[4],m[5],m[7],m[8]);
   m1[1] = -mtx2x2_det(m[3],m[5],m[6],m[8]);
   m1[2] = mtx2x2_det(m[3],m[4],m[6],m[7]);

   m1[4] = -mtx2x2_det(m[1],m[2],m[7],m[8]);
   m1[5] = mtx2x2_det(m[0],m[2],m[6],m[8]);
   m1[6] = -mtx2x2_det(m[0],m[1],m[6],m[7]);

   m1[8] = mtx2x2_det(m[1],m[2],m[4],m[5]);
   m1[9] = -mtx2x2_det(m[0],m[2],m[3],m[5]);
   m1[10] = mtx2x2_det(m[0],m[1],m[3],m[4]);
   for(x=0;x<16;x++) m1[x] *= d;
   m1[3] = m1[7] = m1[11] = 0;m1[15] = 1;
}
//---------------------------------------------------------------------------
void mtx4x3_mult(float *m,float *m1)
{
   float m2[16];

   for(int i = 0;i<11;i++) m2[i] = m[i];
   m[0] = m2[0]*m1[0] + m2[1]*m1[3] + m2[2]*m1[6];
   m[1] = m2[0]*m1[1] + m2[1]*m1[4] + m2[2]*m1[7];
   m[2] = m2[0]*m1[2] + m2[1]*m1[5] + m2[2]*m1[8];

   m[4] = m2[4]*m1[0] + m2[5]*m1[3] + m2[6]*m1[6];
   m[5] = m2[4]*m1[1] + m2[5]*m1[4] + m2[6]*m1[7];
   m[6] = m2[4]*m1[2] + m2[5]*m1[5] + m2[6]*m1[8];

   m[8] = m2[8]*m1[0] + m2[9]*m1[3] + m2[10]*m1[6];
   m[9] = m2[8]*m1[1] + m2[9]*m1[4] + m2[10]*m1[7];
   m[10] = m2[8]*m1[2] + m2[9]*m1[5] + m2[10]*m1[8];
}
//---------------------------------------------------------------------------
void mtx3x3_mult(float *m,float *m1)
{
   float m2[12];

   for(int i = 0;i<11;i++)
       m2[i] = m[i];
   m[0] = m2[0]*m1[0] + m2[1]*m1[3] + m2[2]*m1[6];
   m[1] = m2[0]*m1[1] + m2[1]*m1[4] + m2[2]*m1[7];
   m[2] = m2[0]*m1[2] + m2[1]*m1[5] + m2[2]*m1[8];

   m[4] = m2[3]*m1[0] + m2[4]*m1[3] + m2[5]*m1[6];
   m[5] = m2[3]*m1[1] + m2[4]*m1[4] + m2[5]*m1[7];
   m[6] = m2[3]*m1[2] + m2[4]*m1[5] + m2[5]*m1[8];

   m[8] = m2[6]*m1[0] + m2[7]*m1[3] + m2[8]*m1[6];
   m[9] = m2[6]*m1[1] + m2[7]*m1[4] + m2[8]*m1[7];
   m[10] = m2[6]*m1[2] + m2[7]*m1[5] + m2[8]*m1[8];
}
//---------------------------------------------------------------------------
void mtx4x4_mult(float *m,float *m1)
{
/*   float m2[20],*pm2,f[8],*pf;

   pm2 = &m2[4];
   if(((unsigned long)pm2) & 15)
       pm2 = (float *)((unsigned long)pm2 & ~15);
   pf = &f[4];
   if(((unsigned long)pf) & 15)
       pf = (float *)((unsigned long)pf & ~15);
   memcpy(pm2,m,sizeof(float)*16);
   pf[0] = m1[0];
__asm lino*/
   float m2[16];

   memcpy(m2,m,sizeof(float)*16);
   m[0] = m1[0]*m2[0] + m1[1]*m2[4] + m1[2]*m2[8] + m1[3]*m2[12];
   m[1] = m1[0]*m2[1] + m1[1]*m2[5] + m1[2]*m2[9] + m1[3]*m2[13];
   m[2] = m1[0]*m2[2] + m1[1]*m2[6] + m1[2]*m2[10] + m1[3]*m2[14];
   m[3] = m1[0]*m2[3] + m1[1]*m2[7] + m1[2]*m2[11] + m1[3]*m2[15];

   m[4] = m1[4]*m2[0] + m1[5]*m2[4] + m1[6]*m2[8] + m1[7]*m2[12];
   m[5] = m1[4]*m2[1] + m1[5]*m2[5] + m1[6]*m2[9] + m1[7]*m2[13];
   m[6] = m1[4]*m2[2] + m1[5]*m2[6] + m1[6]*m2[10] + m1[7]*m2[14];
   m[7] = m1[4]*m2[3] + m1[5]*m2[7] + m1[6]*m2[11] + m1[7]*m2[15];

   m[8] = m1[8]*m2[0] + m1[9]*m2[4] + m1[10]*m2[8] + m1[11]*m2[12];
   m[9] = m1[8]*m2[1] + m1[9]*m2[5] + m1[10]*m2[9] + m1[11]*m2[13];
   m[10] = m1[8]*m2[2] + m1[9]*m2[6] + m1[10]*m2[10] + m1[11]*m2[14];
   m[11] = m1[8]*m2[3] + m1[9]*m2[7] + m1[10]*m2[11] + m1[11]*m2[15];

   m[12] = m1[12]*m2[0] + m1[13]*m2[4] + m1[14]*m2[8] + m1[15]*m2[12];
   m[13] = m1[12]*m2[1] + m1[13]*m2[5] + m1[14]*m2[9] + m1[15]*m2[13];
   m[14] = m1[12]*m2[2] + m1[13]*m2[6] + m1[14]*m2[10] + m1[15]*m2[14];
   m[15] = m1[12]*m2[3] + m1[13]*m2[7] + m1[14]*m2[11] + m1[15]*m2[15];
}
//---------------------------------------------------------------------------
void q_norm(float *q)
{
   float f;

   f = sqrt(q[0]*q[0]+q[1]*q[1]+q[2]*q[2]+q[3]*q[3]);
   if(*((int *)&f) == 0)
       return;
   f = 1.0f / f;
   q[0] *= f;
   q[1] *= f;
   q[2] *= f;
   q[3] *= f;
}
//---------------------------------------------------------------------------
void q_mtx4x4(float *q,float *m)
{
   float xx,yy,zz,ww,xy,xz,xw,yz,yw,zw;

   xx = q[0]*q[0];
   yy = q[1]*q[1];
   zz = q[2]*q[2];
   ww = q[3]*q[3];
   xy = q[0]*q[1];
   xz = q[1]*q[2];
   xw = q[0]*q[3];
   yz = q[1]*q[2];
   yw = q[1]*q[3];
   zw = q[2]*q[3];

   m[ 0] = 1.0 - 2.0*(yy+zz);
	m[ 1] = 2.0*(xy-zw);
  	m[ 2] = 2.0*(xz+yw);
	m[ 3] = 0;
   m[ 4] = 2.0*(xy+zw);
   m[ 5] = 1.0-2.0*(xx+zz);
   m[ 6] = 2.0*(yz-xw);
   m[ 7] = 0;
   m[ 8] = 2.0*(xz-yw);
   m[ 9] = 2.0*(yz+xw);
   m[10] = 1.0-2.0*(xx+yy);
   m[11] = 0;
   m[12] = 0;
   m[13] = 0;
   m[14] = 0;
   m[15] = 1.0;
}
//---------------------------------------------------------------------------
void mtx4x4_q(float *m,float *q)
{
   float f;

	f = m[0]+m[5]+m[10];
	if (f > 0.0f){
		f = (float)sqrt(f+1.0f);
		q[3] = f * 0.5f;
		f = 0.5f / f;
		q[0]=(m[9] - m[6])*f;
		q[1]=(m[2] - m[8])*f;
		q[2]=(m[4] - m[1])*f;
	}
	else{
		if(m[0] > m[5] && m[0] > m[10]) {
			f = 2*(sqrt(1+m[0]-m[5]-m[10]));
			q[0] = f/4;
			q[1] = (m[4]+m[1])/f;
			q[2] = (m[2]+m[8])/f;
			q[3] = (m[9]-m[6])/f;
		}
       else if(m[5] > m[10]) {
			f = 2*sqrt(1+m[5]-m[0]-m[10]);
			q[0] = (m[4]+m[1])/f;
			q[1] = f/4;
			q[2] = (m[9]+m[6])/f;
			q[3] = (m[2]-m[8])/f;
		}
       else{
			f = 2*sqrt(1+m[10]-m[0]-m[5]);
			q[0] = (m[2]+m[8])/f;
			q[1] = (m[9]+m[6])/f;
			q[2] = f/4;
			q[3] = (m[4]-m[1])/f;
		}
	}
}

